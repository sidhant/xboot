echo
echo -------- begin --------
avr-gcc --version
if [ -f xboot.elf ]; then echo; echo Size before:; avr-size -x -A xboot.elf; echo; fi
echo "Generating config.h for atxmega192a3u"
echo "// XBoot config header file" > config.h
echo "// MCU: atxmega192a3u" >> config.h
echo "// F_CPU: 2000000" >> config.h
echo >> config.h
if [[ "1" == "y" || "1" == "yes" ]] ; then echo "#define ATTACH_LED_INV" >> config.h ; elif [[ -n "1" && "1" != "n" && "1" != "no" ]] ; then echo "#define ATTACH_LED_INV 1" >> config.h ; fi ;  if [[ "1" == "y" || "1" == "yes" ]] ; then echo "#define ATTACH_LED_PIN" >> config.h ; elif [[ -n "1" && "1" != "n" && "1" != "no" ]] ; then echo "#define ATTACH_LED_PIN 1" >> config.h ; fi ;  if [[ "A" == "y" || "A" == "yes" ]] ; then echo "#define ATTACH_LED_PORT_NAME" >> config.h ; elif [[ -n "A" && "A" != "n" && "A" != "no" ]] ; then echo "#define ATTACH_LED_PORT_NAME A" >> config.h ; fi ;  if [[ "yes" == "y" || "yes" == "yes" ]] ; then echo "#define ENABLE_API" >> config.h ; elif [[ -n "yes" && "yes" != "n" && "yes" != "no" ]] ; then echo "#define ENABLE_API yes" >> config.h ; fi ;  if [[ "yes" == "y" || "yes" == "yes" ]] ; then echo "#define ENABLE_API_FIRMWARE_UPDATE" >> config.h ; elif [[ -n "yes" && "yes" != "n" && "yes" != "no" ]] ; then echo "#define ENABLE_API_FIRMWARE_UPDATE yes" >> config.h ; fi ;  if [[ "yes" == "y" || "yes" == "yes" ]] ; then echo "#define ENABLE_API_LOW_LEVEL_FLASH" >> config.h ; elif [[ -n "yes" && "yes" != "n" && "yes" != "no" ]] ; then echo "#define ENABLE_API_LOW_LEVEL_FLASH yes" >> config.h ; fi ;  if [[ "yes" == "y" || "yes" == "yes" ]] ; then echo "#define ENABLE_API_SPM_WRAPPER" >> config.h ; elif [[ -n "yes" && "yes" != "n" && "yes" != "no" ]] ; then echo "#define ENABLE_API_SPM_WRAPPER yes" >> config.h ; fi ;  if [[ "yes" == "y" || "yes" == "yes" ]] ; then echo "#define ENABLE_BLOCK_SUPPORT" >> config.h ; elif [[ -n "yes" && "yes" != "n" && "yes" != "no" ]] ; then echo "#define ENABLE_BLOCK_SUPPORT yes" >> config.h ; fi ;  if [[ "no" == "y" || "no" == "yes" ]] ; then echo "#define ENABLE_BOOTLOADER_PROTECTION" >> config.h ; elif [[ -n "no" && "no" != "n" && "no" != "no" ]] ; then echo "#define ENABLE_BOOTLOADER_PROTECTION no" >> config.h ; fi ;  if [[ "no" == "y" || "no" == "yes" ]] ; then echo "#define ENABLE_CODE_PROTECTION" >> config.h ; elif [[ -n "no" && "no" != "n" && "no" != "no" ]] ; then echo "#define ENABLE_CODE_PROTECTION no" >> config.h ; fi ;  if [[ "yes" == "y" || "yes" == "yes" ]] ; then echo "#define ENABLE_CRC_SUPPORT" >> config.h ; elif [[ -n "yes" && "yes" != "n" && "yes" != "no" ]] ; then echo "#define ENABLE_CRC_SUPPORT yes" >> config.h ; fi ;  if [[ "yes" == "y" || "yes" == "yes" ]] ; then echo "#define ENABLE_EEPROM_BYTE_SUPPORT" >> config.h ; elif [[ -n "yes" && "yes" != "n" && "yes" != "no" ]] ; then echo "#define ENABLE_EEPROM_BYTE_SUPPORT yes" >> config.h ; fi ;  if [[ "no" == "y" || "no" == "yes" ]] ; then echo "#define ENABLE_EEPROM_PROTECTION" >> config.h ; elif [[ -n "no" && "no" != "n" && "no" != "no" ]] ; then echo "#define ENABLE_EEPROM_PROTECTION no" >> config.h ; fi ;  if [[ "yes" == "y" || "yes" == "yes" ]] ; then echo "#define ENABLE_FLASH_BYTE_SUPPORT" >> config.h ; elif [[ -n "yes" && "yes" != "n" && "yes" != "no" ]] ; then echo "#define ENABLE_FLASH_BYTE_SUPPORT yes" >> config.h ; fi ;  if [[ "yes" == "y" || "yes" == "yes" ]] ; then echo "#define ENABLE_FLASH_ERASE_WRITE" >> config.h ; elif [[ -n "yes" && "yes" != "n" && "yes" != "no" ]] ; then echo "#define ENABLE_FLASH_ERASE_WRITE yes" >> config.h ; fi ;  if [[ "yes" == "y" || "yes" == "yes" ]] ; then echo "#define ENABLE_FUSE_BITS" >> config.h ; elif [[ -n "yes" && "yes" != "n" && "yes" != "no" ]] ; then echo "#define ENABLE_FUSE_BITS yes" >> config.h ; fi ;  if [[ "yes" == "y" || "yes" == "yes" ]] ; then echo "#define ENABLE_LOCK_BITS" >> config.h ; elif [[ -n "yes" && "yes" != "n" && "yes" != "no" ]] ; then echo "#define ENABLE_LOCK_BITS yes" >> config.h ; fi ;  if [[ "3" == "y" || "3" == "yes" ]] ; then echo "#define ENTER_BLINK_COUNT" >> config.h ; elif [[ -n "3" && "3" != "n" && "3" != "no" ]] ; then echo "#define ENTER_BLINK_COUNT 3" >> config.h ; fi ;  if [[ "30000" == "y" || "30000" == "yes" ]] ; then echo "#define ENTER_BLINK_WAIT" >> config.h ; elif [[ -n "30000" && "30000" != "n" && "30000" != "no" ]] ; then echo "#define ENTER_BLINK_WAIT 30000" >> config.h ; fi ;  if [[ "0" == "y" || "0" == "yes" ]] ; then echo "#define ENTER_PIN" >> config.h ; elif [[ -n "0" && "0" != "n" && "0" != "no" ]] ; then echo "#define ENTER_PIN 0" >> config.h ; fi ;  if [[ "1" == "y" || "1" == "yes" ]] ; then echo "#define ENTER_PIN_PUEN" >> config.h ; elif [[ -n "1" && "1" != "n" && "1" != "no" ]] ; then echo "#define ENTER_PIN_PUEN 1" >> config.h ; fi ;  if [[ "0" == "y" || "0" == "yes" ]] ; then echo "#define ENTER_PIN_STATE" >> config.h ; elif [[ -n "0" && "0" != "n" && "0" != "no" ]] ; then echo "#define ENTER_PIN_STATE 0" >> config.h ; fi ;  if [[ "C" == "y" || "C" == "yes" ]] ; then echo "#define ENTER_PORT_NAME" >> config.h ; elif [[ -n "C" && "C" != "n" && "C" != "no" ]] ; then echo "#define ENTER_PORT_NAME C" >> config.h ; fi ;  if [[ "yes" == "y" || "yes" == "yes" ]] ; then echo "#define ENTER_UART_NEED_SYNC" >> config.h ; elif [[ -n "yes" && "yes" != "n" && "yes" != "no" ]] ; then echo "#define ENTER_UART_NEED_SYNC yes" >> config.h ; fi ;  if [[ "yes" == "y" || "yes" == "yes" ]] ; then echo "#define FIFO_BIT_REVERSE" >> config.h ; elif [[ -n "yes" && "yes" != "n" && "yes" != "no" ]] ; then echo "#define FIFO_BIT_REVERSE yes" >> config.h ; fi ;  if [[ "D" == "y" || "D" == "yes" ]] ; then echo "#define FIFO_CTL_PORT_NAME" >> config.h ; elif [[ -n "D" && "D" != "n" && "D" != "no" ]] ; then echo "#define FIFO_CTL_PORT_NAME D" >> config.h ; fi ;  if [[ "C" == "y" || "C" == "yes" ]] ; then echo "#define FIFO_DATA_PORT_NAME" >> config.h ; elif [[ -n "C" && "C" != "n" && "C" != "no" ]] ; then echo "#define FIFO_DATA_PORT_NAME C" >> config.h ; fi ;  if [[ "1" == "y" || "1" == "yes" ]] ; then echo "#define FIFO_RD_N" >> config.h ; elif [[ -n "1" && "1" != "n" && "1" != "no" ]] ; then echo "#define FIFO_RD_N 1" >> config.h ; fi ;  if [[ "3" == "y" || "3" == "yes" ]] ; then echo "#define FIFO_RXF_N" >> config.h ; elif [[ -n "3" && "3" != "n" && "3" != "no" ]] ; then echo "#define FIFO_RXF_N 3" >> config.h ; fi ;  if [[ "2" == "y" || "2" == "yes" ]] ; then echo "#define FIFO_TXE_N" >> config.h ; elif [[ -n "2" && "2" != "n" && "2" != "no" ]] ; then echo "#define FIFO_TXE_N 2" >> config.h ; fi ;  if [[ "0" == "y" || "0" == "yes" ]] ; then echo "#define FIFO_WR_N" >> config.h ; elif [[ -n "0" && "0" != "n" && "0" != "no" ]] ; then echo "#define FIFO_WR_N 0" >> config.h ; fi ;  if [[ "0x10" == "y" || "0x10" == "yes" ]] ; then echo "#define I2C_ADDRESS" >> config.h ; elif [[ -n "0x10" && "0x10" != "n" && "0x10" != "no" ]] ; then echo "#define I2C_ADDRESS 0x10" >> config.h ; fi ;  if [[ "0" == "y" || "0" == "yes" ]] ; then echo "#define I2C_AUTONEG_DIS_GC" >> config.h ; elif [[ -n "0" && "0" != "n" && "0" != "no" ]] ; then echo "#define I2C_AUTONEG_DIS_GC 0" >> config.h ; fi ;  if [[ "1" == "y" || "1" == "yes" ]] ; then echo "#define I2C_AUTONEG_DIS_PROMISC" >> config.h ; elif [[ -n "1" && "1" != "n" && "1" != "no" ]] ; then echo "#define I2C_AUTONEG_DIS_PROMISC 1" >> config.h ; fi ;  if [[ "2" == "y" || "2" == "yes" ]] ; then echo "#define I2C_AUTONEG_PIN" >> config.h ; elif [[ -n "2" && "2" != "n" && "2" != "no" ]] ; then echo "#define I2C_AUTONEG_PIN 2" >> config.h ; fi ;  if [[ "A" == "y" || "A" == "yes" ]] ; then echo "#define I2C_AUTONEG_PORT_NAME" >> config.h ; elif [[ -n "A" && "A" != "n" && "A" != "no" ]] ; then echo "#define I2C_AUTONEG_PORT_NAME A" >> config.h ; fi ;  if [[ "C" == "y" || "C" == "yes" ]] ; then echo "#define I2C_DEVICE_PORT" >> config.h ; elif [[ -n "C" && "C" != "n" && "C" != "no" ]] ; then echo "#define I2C_DEVICE_PORT C" >> config.h ; fi ;  if [[ "1" == "y" || "1" == "yes" ]] ; then echo "#define I2C_GC_ENABLE" >> config.h ; elif [[ -n "1" && "1" != "n" && "1" != "no" ]] ; then echo "#define I2C_GC_ENABLE 1" >> config.h ; fi ;  if [[ "1" == "y" || "1" == "yes" ]] ; then echo "#define I2C_MATCH_ANY" >> config.h ; elif [[ -n "1" && "1" != "n" && "1" != "no" ]] ; then echo "#define I2C_MATCH_ANY 1" >> config.h ; fi ;  if [[ "1" == "y" || "1" == "yes" ]] ; then echo "#define LED_INV" >> config.h ; elif [[ -n "1" && "1" != "n" && "1" != "no" ]] ; then echo "#define LED_INV 1" >> config.h ; fi ;  if [[ "1" == "y" || "1" == "yes" ]] ; then echo "#define LED_PIN" >> config.h ; elif [[ -n "1" && "1" != "n" && "1" != "no" ]] ; then echo "#define LED_PIN 1" >> config.h ; fi ;  if [[ "C" == "y" || "C" == "yes" ]] ; then echo "#define LED_PORT_NAME" >> config.h ; elif [[ -n "C" && "C" != "n" && "C" != "no" ]] ; then echo "#define LED_PORT_NAME C" >> config.h ; fi ;  if [[ "115200" == "y" || "115200" == "yes" ]] ; then echo "#define UART_BAUD_RATE" >> config.h ; elif [[ -n "115200" && "115200" != "n" && "115200" != "no" ]] ; then echo "#define UART_BAUD_RATE 115200" >> config.h ; fi ;  if [[ "4" == "y" || "4" == "yes" ]] ; then echo "#define UART_EN_PIN" >> config.h ; elif [[ -n "4" && "4" != "n" && "4" != "no" ]] ; then echo "#define UART_EN_PIN 4" >> config.h ; fi ;  if [[ "0" == "y" || "0" == "yes" ]] ; then echo "#define UART_EN_PIN_INV" >> config.h ; elif [[ -n "0" && "0" != "n" && "0" != "no" ]] ; then echo "#define UART_EN_PIN_INV 0" >> config.h ; fi ;  if [[ "C" == "y" || "C" == "yes" ]] ; then echo "#define UART_EN_PORT_NAME" >> config.h ; elif [[ -n "C" && "C" != "n" && "C" != "no" ]] ; then echo "#define UART_EN_PORT_NAME C" >> config.h ; fi ;  if [[ "1" == "y" || "1" == "yes" ]] ; then echo "#define UART_NUMBER" >> config.h ; elif [[ -n "1" && "1" != "n" && "1" != "no" ]] ; then echo "#define UART_NUMBER 1" >> config.h ; fi ;  if [[ "E" == "y" || "E" == "yes" ]] ; then echo "#define UART_PORT_NAME" >> config.h ; elif [[ -n "E" && "E" != "n" && "E" != "no" ]] ; then echo "#define UART_PORT_NAME E" >> config.h ; fi ;  if [[ "yes" == "y" || "yes" == "yes" ]] ; then echo "#define UART_RX_PUEN" >> config.h ; elif [[ -n "yes" && "yes" != "n" && "yes" != "no" ]] ; then echo "#define UART_RX_PUEN yes" >> config.h ; fi ;  if [[ "1" == "y" || "1" == "yes" ]] ; then echo "#define USE_API_VERSION" >> config.h ; elif [[ -n "1" && "1" != "n" && "1" != "no" ]] ; then echo "#define USE_API_VERSION 1" >> config.h ; fi ;  if [[ "no" == "y" || "no" == "yes" ]] ; then echo "#define USE_ATTACH_LED" >> config.h ; elif [[ -n "no" && "no" != "n" && "no" != "no" ]] ; then echo "#define USE_ATTACH_LED no" >> config.h ; fi ;  if [[ "no" == "y" || "no" == "yes" ]] ; then echo "#define USE_AVR1008_EEPROM" >> config.h ; elif [[ -n "no" && "no" != "n" && "no" != "no" ]] ; then echo "#define USE_AVR1008_EEPROM no" >> config.h ; fi ;  if [[ "yes" == "y" || "yes" == "yes" ]] ; then echo "#define USE_ENTER_DELAY" >> config.h ; elif [[ -n "yes" && "yes" != "n" && "yes" != "no" ]] ; then echo "#define USE_ENTER_DELAY yes" >> config.h ; fi ;  if [[ "no" == "y" || "no" == "yes" ]] ; then echo "#define USE_ENTER_FIFO" >> config.h ; elif [[ -n "no" && "no" != "n" && "no" != "no" ]] ; then echo "#define USE_ENTER_FIFO no" >> config.h ; fi ;  if [[ "no" == "y" || "no" == "yes" ]] ; then echo "#define USE_ENTER_I2C" >> config.h ; elif [[ -n "no" && "no" != "n" && "no" != "no" ]] ; then echo "#define USE_ENTER_I2C no" >> config.h ; fi ;  if [[ "no" == "y" || "no" == "yes" ]] ; then echo "#define USE_ENTER_PIN" >> config.h ; elif [[ -n "no" && "no" != "n" && "no" != "no" ]] ; then echo "#define USE_ENTER_PIN no" >> config.h ; fi ;  if [[ "yes" == "y" || "yes" == "yes" ]] ; then echo "#define USE_ENTER_UART" >> config.h ; elif [[ -n "yes" && "yes" != "n" && "yes" != "no" ]] ; then echo "#define USE_ENTER_UART yes" >> config.h ; fi ;  if [[ "no" == "y" || "no" == "yes" ]] ; then echo "#define USE_FIFO" >> config.h ; elif [[ -n "no" && "no" != "n" && "no" != "no" ]] ; then echo "#define USE_FIFO no" >> config.h ; fi ;  if [[ "no" == "y" || "no" == "yes" ]] ; then echo "#define USE_I2C" >> config.h ; elif [[ -n "no" && "no" != "n" && "no" != "no" ]] ; then echo "#define USE_I2C no" >> config.h ; fi ;  if [[ "no" == "y" || "no" == "yes" ]] ; then echo "#define USE_I2C_ADDRESS_NEGOTIATION" >> config.h ; elif [[ -n "no" && "no" != "n" && "no" != "no" ]] ; then echo "#define USE_I2C_ADDRESS_NEGOTIATION no" >> config.h ; fi ;  if [[ "no" == "y" || "no" == "yes" ]] ; then echo "#define USE_INTERRUPTS" >> config.h ; elif [[ -n "no" && "no" != "n" && "no" != "no" ]] ; then echo "#define USE_INTERRUPTS no" >> config.h ; fi ;  if [[ "yes" == "y" || "yes" == "yes" ]] ; then echo "#define USE_LED" >> config.h ; elif [[ -n "yes" && "yes" != "n" && "yes" != "no" ]] ; then echo "#define USE_LED yes" >> config.h ; fi ;  if [[ "yes" == "y" || "yes" == "yes" ]] ; then echo "#define USE_UART" >> config.h ; elif [[ -n "yes" && "yes" != "n" && "yes" != "no" ]] ; then echo "#define USE_UART yes" >> config.h ; fi ;  if [[ "no" == "y" || "no" == "yes" ]] ; then echo "#define USE_UART_EN_PIN" >> config.h ; elif [[ -n "no" && "no" != "n" && "no" != "no" ]] ; then echo "#define USE_UART_EN_PIN no" >> config.h ; fi ;  if [[ "no" == "y" || "no" == "yes" ]] ; then echo "#define USE_WATCHDOG" >> config.h ; elif [[ -n "no" && "no" != "n" && "no" != "no" ]] ; then echo "#define USE_WATCHDOG no" >> config.h ; fi ;  if [[ "WDT_PER_1KCLK_gc" == "y" || "WDT_PER_1KCLK_gc" == "yes" ]] ; then echo "#define WATCHDOG_TIMEOUT" >> config.h ; elif [[ -n "WDT_PER_1KCLK_gc" && "WDT_PER_1KCLK_gc" != "n" && "WDT_PER_1KCLK_gc" != "no" ]] ; then echo "#define WATCHDOG_TIMEOUT WDT_PER_1KCLK_gc" >> config.h ; fi ;
echo
echo Compiling: xboot.c
avr-gcc -c -mmcu=atxmega192a3u -I. -gstabs   -Os -funsigned-char -funsigned-bitfields -fpack-struct -fshort-enums -ffunction-sections -fdata-sections -fno-jump-tables -Wall -Wa,-adhlns=xboot.lst  -Wstrict-prototypes -std=gnu99 -MD -MP -MF .dep/xboot.o.d -DF_CPU=2000000L -DUSE_CONFIG_H xboot.c -o xboot.o
echo
echo Compiling: flash.c
avr-gcc -c -mmcu=atxmega192a3u -I. -gstabs   -Os -funsigned-char -funsigned-bitfields -fpack-struct -fshort-enums -ffunction-sections -fdata-sections -fno-jump-tables -Wall -Wa,-adhlns=flash.lst  -Wstrict-prototypes -std=gnu99 -MD -MP -MF .dep/flash.o.d -DF_CPU=2000000L -DUSE_CONFIG_H flash.c -o flash.o
echo
echo Compiling: eeprom_driver.c
avr-gcc -c -mmcu=atxmega192a3u -I. -gstabs   -Os -funsigned-char -funsigned-bitfields -fpack-struct -fshort-enums -ffunction-sections -fdata-sections -fno-jump-tables -Wall -Wa,-adhlns=eeprom_driver.lst  -Wstrict-prototypes -std=gnu99 -MD -MP -MF .dep/eeprom_driver.o.d -DF_CPU=2000000L -DUSE_CONFIG_H eeprom_driver.c -o eeprom_driver.o
echo
echo Compiling: uart.c
avr-gcc -c -mmcu=atxmega192a3u -I. -gstabs   -Os -funsigned-char -funsigned-bitfields -fpack-struct -fshort-enums -ffunction-sections -fdata-sections -fno-jump-tables -Wall -Wa,-adhlns=uart.lst  -Wstrict-prototypes -std=gnu99 -MD -MP -MF .dep/uart.o.d -DF_CPU=2000000L -DUSE_CONFIG_H uart.c -o uart.o
echo
echo Compiling: i2c.c
avr-gcc -c -mmcu=atxmega192a3u -I. -gstabs   -Os -funsigned-char -funsigned-bitfields -fpack-struct -fshort-enums -ffunction-sections -fdata-sections -fno-jump-tables -Wall -Wa,-adhlns=i2c.lst  -Wstrict-prototypes -std=gnu99 -MD -MP -MF .dep/i2c.o.d -DF_CPU=2000000L -DUSE_CONFIG_H i2c.c -o i2c.o
echo
echo Compiling: fifo.c
avr-gcc -c -mmcu=atxmega192a3u -I. -gstabs   -Os -funsigned-char -funsigned-bitfields -fpack-struct -fshort-enums -ffunction-sections -fdata-sections -fno-jump-tables -Wall -Wa,-adhlns=fifo.lst  -Wstrict-prototypes -std=gnu99 -MD -MP -MF .dep/fifo.o.d -DF_CPU=2000000L -DUSE_CONFIG_H fifo.c -o fifo.o
echo
echo Compiling: watchdog.c
avr-gcc -c -mmcu=atxmega192a3u -I. -gstabs   -Os -funsigned-char -funsigned-bitfields -fpack-struct -fshort-enums -ffunction-sections -fdata-sections -fno-jump-tables -Wall -Wa,-adhlns=watchdog.lst  -Wstrict-prototypes -std=gnu99 -MD -MP -MF .dep/watchdog.o.d -DF_CPU=2000000L -DUSE_CONFIG_H watchdog.c -o watchdog.o
echo
echo Compiling: api.c
avr-gcc -c -mmcu=atxmega192a3u -I. -gstabs   -Os -funsigned-char -funsigned-bitfields -fpack-struct -fshort-enums -ffunction-sections -fdata-sections -fno-jump-tables -Wall -Wa,-adhlns=api.lst  -Wstrict-prototypes -std=gnu99 -MD -MP -MF .dep/api.o.d -DF_CPU=2000000L -DUSE_CONFIG_H api.c -o api.o
echo
echo Assembling: sp_driver.S
avr-gcc -c -mmcu=atxmega192a3u -I. -x assembler-with-cpp -Wa,-adhlns=sp_driver.lst,-gstabs -DF_CPU=2000000L -DUSE_CONFIG_H sp_driver.S -o sp_driver.o
echo
echo Linking: xboot.elf
avr-gcc -mmcu=atxmega192a3u -I. -gstabs   -Os -funsigned-char -funsigned-bitfields -fpack-struct -fshort-enums -ffunction-sections -fdata-sections -fno-jump-tables -Wall -Wa,-adhlns=config.lst  -Wstrict-prototypes -std=gnu99 -MD -MP -MF .dep/xboot.elf.d -DF_CPU=2000000L -DUSE_CONFIG_H xboot.o flash.o eeprom_driver.o uart.o i2c.o fifo.o watchdog.o api.o sp_driver.o --output xboot.elf -Wl,-Map=xboot.map,--cref -Wl,--gc-sections    -lm -Wl,--section-start=.text=0x030000
echo
echo Creating load file for Flash: xboot.hex
avr-objcopy -O ihex -R .eeprom xboot.elf xboot.hex
echo
echo Creating load file for boot section: xboot-boot.hex
avr-objcopy -O ihex --change-addresses -0x030000 xboot.hex xboot-boot.hex
echo
echo Creating load file for EEPROM: xboot.eep
avr-objcopy -j .eeprom --set-section-flags=.eeprom="alloc,load" \
	--change-section-lma .eeprom=0 -O ihex xboot.elf xboot.eep
echo
echo Creating Extended Listing: xboot.lss
avr-objdump -h -S xboot.elf > xboot.lss
echo
echo Creating Symbol Table: xboot.sym
avr-nm -n xboot.elf > xboot.sym
if [ -f xboot.elf ]; then echo; echo Size after:; avr-size -x -A xboot.elf; echo; fi
echo Errors: none
echo --------  end  --------
echo